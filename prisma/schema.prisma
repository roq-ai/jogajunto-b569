generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model court {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String   @db.VarChar(255)
  location     String   @db.VarChar(255)
  availability Boolean
  user_id      String   @db.Uuid
  created_at   DateTime @default(now()) @db.Timestamp(6)
  updated_at   DateTime @default(now()) @db.Timestamp(6)
  user         user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model match {
  id                           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                      String   @db.Uuid
  schedule_id                  String   @db.Uuid
  opponent_id                  String   @db.Uuid
  score                        Int
  status                       String   @db.VarChar(255)
  created_at                   DateTime @default(now()) @db.Timestamp(6)
  updated_at                   DateTime @default(now()) @db.Timestamp(6)
  user_match_opponent_idTouser user     @relation("match_opponent_idTouser", fields: [opponent_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  schedule                     schedule @relation(fields: [schedule_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_match_user_idTouser     user     @relation("match_user_idTouser", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model organization {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?    @db.VarChar(255)
  name        String     @db.VarChar(255)
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  updated_at  DateTime   @default(now()) @db.Timestamp(6)
  user_id     String     @db.Uuid
  tenant_id   String     @db.VarChar(255)
  user        user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  schedule    schedule[]
}

model review {
  id                            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                       String   @db.Uuid
  reviewer_id                   String   @db.Uuid
  fair_play                     Int
  playability                   Int
  punctuality                   Int
  availability                  Int
  created_at                    DateTime @default(now()) @db.Timestamp(6)
  updated_at                    DateTime @default(now()) @db.Timestamp(6)
  user_review_reviewer_idTouser user     @relation("review_reviewer_idTouser", fields: [reviewer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_review_user_idTouser     user     @relation("review_user_idTouser", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model schedule {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  match_date      DateTime     @db.Date
  match_time      DateTime     @db.Time(6)
  user_id         String       @db.Uuid
  organization_id String       @db.Uuid
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  match           match[]
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user            user         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id                              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                           String         @unique @db.VarChar(255)
  firstName                       String?        @db.VarChar(255)
  lastName                        String?        @db.VarChar(255)
  roq_user_id                     String         @db.VarChar(255)
  tenant_id                       String         @db.VarChar(255)
  created_at                      DateTime       @default(now()) @db.Timestamp(6)
  updated_at                      DateTime       @default(now()) @db.Timestamp(6)
  court                           court[]
  match_match_opponent_idTouser   match[]        @relation("match_opponent_idTouser")
  match_match_user_idTouser       match[]        @relation("match_user_idTouser")
  organization                    organization[]
  review_review_reviewer_idTouser review[]       @relation("review_reviewer_idTouser")
  review_review_user_idTouser     review[]       @relation("review_user_idTouser")
  schedule                        schedule[]
}
